/* armouring at the requires side (interface IStrict)
 * create a robust copy of the requires interface IRobust
 * create an armouring component Armour
 * 
 * MissingSynchronousOutEvent_
 * context is expected to generate out-event via requires interface
 * but may not do that
 */
import Logger.dzn;

interface IStrict
{
  in void ia();
  out void oa();

  behaviour
  {
    on ia: oa;
  }
}

interface IRobust
{
  in void ia();
  out void oa();

  behaviour
  {
    on ia: oa;
    on ia: {}
  }
}

component ArmourMSOE {
	provides IStrict pStrict;
	requires IRobust rRobust;
	requires injected ILogger iLog;

	behaviour {	
		requires dzn.async p;
		bool xxxx = false;
				
		on pStrict.ia(): blocking {rRobust.ia(); p.req();}
		on rRobust.oa(): {pStrict.reply(); pStrict.oa(); p.clr();}
		on p.ack(): {pStrict.reply(); pStrict.oa(); iLog.Log($"Native comp does not send sync out-event oa"$);}
    }
}

component Dezyne {
	provides IA pp;
	requires IStrict rStrict;
	
	behaviour {			
		on pp.ia(): blocking {rStrict.ia();}
		on rStrict.oa(): {pp.reply(); pp.oa();}
    }
}

interface IA
{
  in void ia();
  out void oa();

  behaviour
  {
    on ia: oa;
  }
}

component Native {
	provides IRobust pRobust;
	requires IRobust r;
}

component ArmouredSystemMSOE {
	provides IA pp;
	requires IRobust ir;
	
	system {
		Dezyne re;
		ArmourMSOE am;
		Native n;
		
		pp <=> re.pp;
		re.rStrict <=> am.pStrict;
		am.rRobust <=> n.pRobust;
		n.r <=> ir;
	}
}
