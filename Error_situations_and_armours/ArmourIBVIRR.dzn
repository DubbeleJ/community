/* armouring at the requires side (interface IStrict)
 * create a robust copy of the requires interface IRobust
 * create an armouring component Armour
 *  
 * IllegalBooleanValueInRequiresReply_
 * a reply value from a required interface can contain a boolean value that is not allowed
 */
import Logger.dzn;

interface IStrict
{
  in bool ia();

  behaviour
  {
    on ia: reply (true);
  }
}

interface IRobust
{
  in bool ia();

  behaviour
  {
    on ia: reply (true);
    on ia: reply (false);
  }
}

component ArmourIBVIRR // IStrict to IRobust
{
  provides IStrict pStrict;
  requires IRobust rRobust;
  requires injected ILogger iLog;
  
  behaviour {
    on pStrict.ia(): {
    	bool b = rRobust.ia();
    	if (!b) iLog.Log($"Reply value false from ia not allowed by port"$);
    	reply(true);
    } // armour ignore (false) case 
  }
}

component Dezyne
{
  provides IA pp;
  requires IStrict rStrict;

  behaviour
  {
    on pp.ia(): {bool b = rStrict.ia(); reply(b);}
  }
}

/*
 * erroneous situation completely hidden below interface IA
 * depends on application whether this is ok or error should be raised higher up
 */
interface IA
{  
  in bool ia();

  behaviour
  {
    on ia: reply (true);
  }
}

component Native {
	provides IRobust pRobust;
	requires IRobust r;
}

component ArmouredSystemIBVIRR {
	provides IA pp;
	requires IRobust ir;
	
	system {
		Dezyne re;
		ArmourIBVIRR am;
		Native n;
		
		pp <=> re.pp;
		re.rStrict <=> am.pStrict;
		am.rRobust <=> n.pRobust;
		n.r <=> ir;
	}
}
