interface IA {
	in void init();		// activate super statemachine
	in void ssm1();		// start of sub statemachine 1
	in void ssm2();		// start of sub statemachine 2
	out void substep(); // intermediate reporting back of SSM progress
	out void ssmDone(); // report completion of SSM;
	
	behaviour {
		enum State {Off, Idle, Busy};
		State state = State.Off;
		
		[state.Off] {
			on init: {state = State.Idle;}
			on ssm1, ssm2: illegal;
		}
		[state.Idle] {
			on init: illegal;
			on ssm1: {state = State.Busy;}
			on ssm2: {state = State.Busy;}
		}
		[state.Busy] {
			on init: illegal;
			on ssm1, ssm2: illegal;
			on inevitable: {ssmDone; state = State.Idle;}
			on optional: substep;
		}
	}
}

interface IResource {
	in void doX();
	in void doY();
	in void doZ();
	out void done();
	
	behaviour {
		enum State {Idle, Busy};
		State state = State.Idle;
		[state.Idle] {
			on doX, doY, doZ: {state = State.Busy;}	
		}
		[state.Busy] {
			on doX, doY, doZ: illegal;
			on inevitable: {done; state = State.Idle;}	
		}
	}
}

// 'internal' sub state machine interface
interface IReflector {
	in void forward();
	in void exit();
	out void entry();
	out void back();
	
	behaviour {
		on forward: entry;
		on exit: back;
	}
}

component SSMPattern {
	provides IA ia;
	requires IResource iresource;
	requires IReflector ireflector;
	
	behaviour {
		enum State {Off, Idle, Busy}; // super state machine states
		enum Submachine {One, Two};	// to keep track which sub state machine is active
		enum Substate {Idle, A, B};		// used by both sub state machines
		State state = State.Off;
		Submachine submachine = Submachine.One;
		Substate substate = Substate.Idle;
		
		[state.Off] {
			on ia.init(): {state = State.Idle;}
			
		}		
		[state.Idle] {
			on ia.ssm1(): {state = State.Busy; submachine = Submachine.One; ireflector.forward();}
			on ia.ssm2(): {state = State.Busy; submachine = Submachine.Two; ireflector.forward();}
		}
		[state.Busy] {
			on ireflector.back(): {
				ia.ssmDone();
				state = State.Idle; 
			}
		}
		
		//sub state machine1
		[state.Busy && submachine.One] {
			[substate.Idle] on ireflector.entry(): {
				iresource.doX();
				substate = Substate.A;
			}
			[substate.A] on iresource.done(): {
				ia.substep();
				iresource.doY();
				substate = Substate.B;
			}
			[substate.B] on iresource.done(): {
				ireflector.exit();
				substate = Substate.Idle;
			}	 
		}
		
		//sub state machine2
		[state.Busy && submachine.Two] { 
			[substate.Idle] on ireflector.entry(): {
				iresource.doY();
				substate = Substate.A;
			}
			[substate.A] on iresource.done(): {
				ia.substep();
				iresource.doX();
				substate = Substate.B;
			}
			[substate.B] on iresource.done(): {
				ireflector.exit();
				substate = Substate.Idle; 
			}			 
		}		
	}
}

component Reflector {
	provides IReflector ireflector;
	
	behaviour {
		on ireflector.forward(): ireflector.entry();
		on ireflector.exit(): ireflector.back();		
	}
}
